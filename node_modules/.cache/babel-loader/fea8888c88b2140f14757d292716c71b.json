{"ast":null,"code":"import _slicedToArray from\"/Users/saul/Documents/React/BookSystem/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState}from'react';import{Form,Button,Card,Alert}from'react-bootstrap';import{useAuth}from'../Context/Auth';import{Link,useHistory}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function UpdateProfile(){var emailRef=useRef();var passwordRef=useRef();var passwordConfirmRef=useRef();var _useAuth=useAuth(),currentUser=_useAuth.currentUser,updateEmail=_useAuth.updateEmail,updatePassword=_useAuth.updatePassword;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var history=useHistory();var handleSubmit=function handleSubmit(e){e.preventDefault();if(passwordRef.current.value!==passwordConfirmRef.current.value){return setError(\"Passwords do not match\");}var promises=[];setLoading(true);setError(\"\");if(emailRef.current.value!==currentUser.email){promises.push(updateEmail(emailRef.current.value));}if(passwordRef.current.value!==currentUser.password){promises.push(updatePassword(passwordRef.current.value));}Promise.all(promises).then(function(){history.push(\"/\");}).catch(function(err){return setError(err.message);}).finally(function(){return setLoading(false);});};return/*#__PURE__*/_jsxs(\"div\",{className:\"updateprofile-wrapper\",children:[/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-center mb-4\",children:\"Update Profile\"}),error&&/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:error}),/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Form.Group,{id:\"email\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Email\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"email\",ref:emailRef,required:true,defaultValue:currentUser.email})]}),/*#__PURE__*/_jsxs(Form.Group,{id:\"password\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Password\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",ref:passwordRef,placeholder:\"Leave blank to keep the same\"})]}),/*#__PURE__*/_jsxs(Form.Group,{id:\"password-confirmation\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Password Confirmation\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",ref:passwordConfirmRef,placeholder:\"Leave blank to keep the same\"})]}),/*#__PURE__*/_jsx(Button,{disabled:loading,type:\"submit\",className:\"w-100\",children:\"Update\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"w-100 text-center mt-2\",children:/*#__PURE__*/_jsx(Link,{to:\"/dashboard\",children:\"Cancel\"})})]});}export default UpdateProfile;","map":{"version":3,"sources":["/Users/saul/Documents/React/BookSystem/frontend/src/Components/UpdateProfile.js"],"names":["React","useRef","useState","Form","Button","Card","Alert","useAuth","Link","useHistory","UpdateProfile","emailRef","passwordRef","passwordConfirmRef","currentUser","updateEmail","updatePassword","error","setError","loading","setLoading","history","handleSubmit","e","preventDefault","current","value","promises","email","push","password","Promise","all","then","catch","err","message","finally"],"mappings":"sKAAA,MAAOA,CAAAA,KAAP,EAAeC,MAAf,CAAsBC,QAAtB,KAAqC,OAArC,CACA,OAAQC,IAAR,CAAcC,MAAd,CAAsBC,IAAtB,CAA4BC,KAA5B,KAAwC,iBAAxC,CACA,OAAQC,OAAR,KAAsB,iBAAtB,CACA,OAAQC,IAAR,CAAaC,UAAb,KAA8B,kBAA9B,C,wFAEA,QAASC,CAAAA,aAAT,EAAyB,CACrB,GAAMC,CAAAA,QAAQ,CAAGV,MAAM,EAAvB,CACA,GAAMW,CAAAA,WAAW,CAAGX,MAAM,EAA1B,CACA,GAAMY,CAAAA,kBAAkB,CAAGZ,MAAM,EAAjC,CAHqB,aAI4BM,OAAO,EAJnC,CAIdO,WAJc,UAIdA,WAJc,CAIFC,WAJE,UAIFA,WAJE,CAIUC,cAJV,UAIUA,cAJV,eAKId,QAAQ,CAAC,EAAD,CALZ,wCAKde,KALc,eAKRC,QALQ,8BAMQhB,QAAQ,CAAC,KAAD,CANhB,yCAMdiB,OANc,eAMNC,UANM,eAOrB,GAAMC,CAAAA,OAAO,CAAGZ,UAAU,EAA1B,CAGA,GAAMa,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CACxBA,CAAC,CAACC,cAAF,GACA,GAAGZ,WAAW,CAACa,OAAZ,CAAoBC,KAApB,GAA8Bb,kBAAkB,CAACY,OAAnB,CAA2BC,KAA5D,CAAkE,CAC9D,MAAOR,CAAAA,QAAQ,CAAC,wBAAD,CAAf,CACH,CACD,GAAMS,CAAAA,QAAQ,CAAG,EAAjB,CACAP,UAAU,CAAC,IAAD,CAAV,CACAF,QAAQ,CAAC,EAAD,CAAR,CACA,GAAGP,QAAQ,CAACc,OAAT,CAAiBC,KAAjB,GAA2BZ,WAAW,CAACc,KAA1C,CAAgD,CAC5CD,QAAQ,CAACE,IAAT,CAAcd,WAAW,CAACJ,QAAQ,CAACc,OAAT,CAAiBC,KAAlB,CAAzB,EACH,CACD,GAAGd,WAAW,CAACa,OAAZ,CAAoBC,KAApB,GAA8BZ,WAAW,CAACgB,QAA7C,CAAsD,CAClDH,QAAQ,CAACE,IAAT,CAAcb,cAAc,CAACJ,WAAW,CAACa,OAAZ,CAAoBC,KAArB,CAA5B,EACH,CAEDK,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAAsBM,IAAtB,CAA2B,UAAI,CAC3BZ,OAAO,CAACQ,IAAR,CAAa,GAAb,EACH,CAFD,EAEGK,KAFH,CAES,SAAAC,GAAG,QAAIjB,CAAAA,QAAQ,CAACiB,GAAG,CAACC,OAAL,CAAZ,EAFZ,EAEuCC,OAFvC,CAE+C,iBAAKjB,CAAAA,UAAU,CAAC,KAAD,CAAf,EAF/C,EAKH,CApBD,CAsBA,mBACI,aAAK,SAAS,CAAC,uBAAf,wBACI,KAAC,IAAD,wBACI,MAAC,IAAD,CAAM,IAAN,yBACI,WAAI,SAAS,CAAC,kBAAd,4BADJ,CAEKH,KAAK,eAAI,KAAC,KAAD,EAAO,OAAO,CAAC,QAAf,UAAyBA,KAAzB,EAFd,cAIA,MAAC,IAAD,EAAM,QAAQ,CAAEK,YAAhB,wBACI,MAAC,IAAD,CAAM,KAAN,EAAY,EAAE,CAAC,OAAf,wBACI,KAAC,IAAD,CAAM,KAAN,oBADJ,cAEI,KAAC,IAAD,CAAM,OAAN,EAAc,IAAI,CAAC,OAAnB,CAA2B,GAAG,CAAEX,QAAhC,CAA0C,QAAQ,KAAlD,CACA,YAAY,CAAEG,WAAW,CAACc,KAD1B,EAFJ,GADJ,cAMI,MAAC,IAAD,CAAM,KAAN,EAAY,EAAE,CAAC,UAAf,wBACI,KAAC,IAAD,CAAM,KAAN,uBADJ,cAEI,KAAC,IAAD,CAAM,OAAN,EAAc,IAAI,CAAC,UAAnB,CAA8B,GAAG,CAAEhB,WAAnC,CACA,WAAW,CAAC,8BADZ,EAFJ,GANJ,cAYI,MAAC,IAAD,CAAM,KAAN,EAAY,EAAE,CAAC,uBAAf,wBACI,KAAC,IAAD,CAAM,KAAN,oCADJ,cAEI,KAAC,IAAD,CAAM,OAAN,EAAc,IAAI,CAAC,UAAnB,CAA8B,GAAG,CAAEC,kBAAnC,CACA,WAAW,CAAC,8BADZ,EAFJ,GAZJ,cAkBI,KAAC,MAAD,EAAQ,QAAQ,CAAEM,OAAlB,CAA2B,IAAI,CAAC,QAAhC,CAAyC,SAAS,CAAC,OAAnD,oBAlBJ,GAJA,GADJ,EADJ,cA4BQ,YAAK,SAAS,CAAC,wBAAf,uBACG,KAAC,IAAD,EAAM,EAAE,CAAC,YAAT,oBADH,EA5BR,GADJ,CAmCH,CAED,cAAeT,CAAAA,aAAf","sourcesContent":["import React, {useRef,useState} from 'react'\nimport {Form, Button, Card, Alert} from 'react-bootstrap'\nimport {useAuth} from '../Context/Auth'\nimport {Link,useHistory} from 'react-router-dom';\n\nfunction UpdateProfile() {\n    const emailRef = useRef();\n    const passwordRef = useRef();\n    const passwordConfirmRef = useRef();\n    const {currentUser,updateEmail,updatePassword} = useAuth();\n    const [error,setError] = useState(\"\");\n    const [loading,setLoading] = useState(false)\n    const history = useHistory();\n\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(passwordRef.current.value !== passwordConfirmRef.current.value){\n            return setError(\"Passwords do not match\");\n        }\n        const promises = [];\n        setLoading(true);\n        setError(\"\");\n        if(emailRef.current.value !== currentUser.email){\n            promises.push(updateEmail(emailRef.current.value));\n        }\n        if(passwordRef.current.value !== currentUser.password){\n            promises.push(updatePassword(passwordRef.current.value));\n        }\n\n        Promise.all(promises).then(()=>{\n            history.push(\"/\");\n        }).catch(err => setError(err.message)).finally(()=> setLoading(false))\n    \n        \n    }\n\n    return (\n        <div className=\"updateprofile-wrapper\">\n            <Card>\n                <Card.Body>\n                    <h2 className=\"text-center mb-4\" >Update Profile</h2>\n                    {error && <Alert variant=\"danger\">{error}</Alert>}\n  \n                <Form onSubmit={handleSubmit}>\n                    <Form.Group id=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type=\"email\" ref={emailRef} required \n                        defaultValue={currentUser.email} />\n                    </Form.Group>\n                    <Form.Group id=\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" ref={passwordRef}  \n                        placeholder=\"Leave blank to keep the same\" \n                        />\n                    </Form.Group>\n                    <Form.Group id=\"password-confirmation\">\n                        <Form.Label>Password Confirmation</Form.Label>\n                        <Form.Control type=\"password\" ref={passwordConfirmRef}  \n                        placeholder=\"Leave blank to keep the same\"\n                        />\n                    </Form.Group>\n                    <Button disabled={loading} type=\"submit\" className=\"w-100\">Update</Button>\n                </Form>\n                </Card.Body>\n            </Card>\n                <div className=\"w-100 text-center mt-2\">\n                   <Link to=\"/dashboard\">Cancel</Link>\n                </div>\n\n        </div>\n    )\n}\n\nexport default UpdateProfile\n"]},"metadata":{},"sourceType":"module"}